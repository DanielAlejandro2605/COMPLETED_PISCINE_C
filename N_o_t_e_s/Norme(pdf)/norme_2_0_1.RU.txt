
#######################################################################################

								Стандарт 42

#######################################################################################

							  	   Версия 2.0.1

#######################################################################################



Benny benny@42.fr
Thor thor@42.fr
marvin marvin@42.fr



#######################################################################################




Резюме: в этом документе описан действующий стандарт С на 42. Стандарт
программирование определяет набор правил, регулирующих написание кода. Он
Обязательно соблюдать стандарт при написании от C до 42.




#######################################################################################




Содержание


	I       Предисловие

	I.1    Зачем навязывать стандарт?
	I.2    Стандарт в ваших визуализациях
	I.3    Советы.

	II.1   Норма 42

	II.1    Соглашение об именах.
	II.2    Форматирование
	II.3    Параметры функции.
	II.4    Функции
	II.5    Typedef, struct, enum и union
	II.6    Заголовки. 
	II.7    Макросы и препроцессор. 
	II.8    Запрещенные вещи! 
	II.9    Комментарии.
	II.10   Файлы.
	II.11   Makefile. 

	III.      Норминетта(La Norminette)




#######################################################################################




	Глава I

	Предисловие

	Этот документ описывает действующий стандарт C на 42. Стандарт программирования определяет набор правил, регулирующих написание кода. При написании текста от C до 42 обязательно соблюдайте стандарт.




#######################################################################################




I.1 Зачем навязывать норму ?

Стандарт имеет две основные цели:
	• Стандартизируйте свои коды, чтобы каждый мог легко их прочитать, студенты и
контролеры.
	• Пишите простые и понятные коды.




#######################################################################################




I.2 Стандарт в ваших рендерингах

	Все ваши файлы кода C должны соответствовать стандарту 42. Стандарт будет проверен вашими корректорами, и малейшая ошибка в стандарте даст оценку 0 вашему проекту или вашему упражнению. Во время одноранговой исправления ваш корректор должен запустить «Norminette», присутствующий в дампах вашего рендеринга. Следует учитывать что только результат «Norminette» должен быть принят во внимание. Только обязательная часть стандарта проверяется «Norminette».




#######################################################################################




I.3 Cовет

	Как вы быстро поймете, стандарт не является ограничением. Напротив, стандарт является гарантией, которая поможет вам в написании простого и базового C. Вот почему абсолютно необходимо, чтобы вы кодировали непосредственно в стандарт,  пусть и кодируя медленнее в первые часы. Исходный файл, содержащий стандартную ошибку, так же плох, как и файл с десятью. Будь прилежным и прикладным, и стандарт скоро станет автоматическим.




#######################################################################################




I.4 Disclamers
	Ошибки обязательно присутствуют в "Norminette", пожалуйста, сообщите о них в разделе форума Intra (на французском или английском языке). Тем не менее, «Norminette» является авторитетным, и ваши визуализации должны адаптироваться к его ошибкам.




#######################################################################################


Глава II

Стандарт 42

Обязательная часть

	• Имя структуры должно начинаться с s_.

	• Имя typedef должно начинаться с t_.

	• Имя объединения должно начинаться с u_.

	• Имя перечисления должно начинаться с e_.

	• Глобальное имя должно начинаться с g_.

	• Имена переменных, имена функций должны состоять исключительно из строчных букв, цифр и «_» (Unix Case).

	• Имена файлов и каталогов должны состоять исключительно из строчных букв, цифр и "_" (Unix Case).

	• Файл должен быть компилируемым.

	• Символы, которые не являются частью стандартной таблицы ascii, не допускаются.

Рекомендуемая часть

	• Объекты (переменные, функции, макросы, типы, файлы или каталоги) должны иметь наиболее явные или мнемонические имена. Только «счетчики» могут быть названы, как вы хотите.

	• Сокращения допускаются, поскольку они позволяют значительно уменьшить размер имени без потери его значения. Части составных имен будут разделены символом «_».

	• Все идентификаторы (функции, макросы, типы, переменные и т. Д.) Должны быть на английском языке.

	• Любое использование глобальной переменной должно быть оправдано.




#######################################################################################




II.2 Форматирование

Обязательная часть

	• Все ваши файлы должны начинаться со стандартного заголовка 42 с первой строки. Этот заголовок доступен по умолчанию в редакторах emacs и vim в дампах.

	• Вы должны сделать отступ для кода с помощью табуляции размером 4 пробела. Это не эквивалентно 4 пробелам, они табуляции.

	• Каждая функция должна сделать максимум 25 линий, не считая скобки в блоке функции.

	• Каждая строка может составлять не более 80 столбцов, включая комментарии. Внимание: табуляция учитывается не для столбца, а для n пробелов, которые он представляет

	• Только одна инструкция на строку.

	• Пустая строка не должна содержать пробелов или табуляции.

	• Строка никогда не должна заканчиваться пробелами или символами табуляции.

	• При возникновении открывающей или закрывающей фигурной скобки или конца структуры управления необходимо вернуться к строке.

	• Каждая запятая или точка с запятой должна сопровождаться пробелом, если мы не в конце строки.

	• Каждый оператор (двоичный или троичный) и операнды должны быть разделены пробелом и только одним.

	• Каждое ключевое слово C должно сопровождаться пробелом, за исключением ключевых слов типа (таких как int, char, float и т. Д.), А также sizeof.

	• Каждое объявление переменной должно иметь отступ в одном и том же столбце.

	• Звезды указателей должны быть вставлены в имя переменной.

	• Только одно объявление переменной на строку.

	• Нельзя делать объявление и инициализацию в одной строке, за исключением глобальных и статических переменных.

	• Объявления должны быть в начале функции и должны быть отделены от реализации пустой строкой.

	• Пустые строки не должны присутствовать в середине объявлений или реализации.

	• Многократное назначение запрещено.

	• Вы можете вернуться к строке во время той же инструкции или структуры управления, но вы должны добавить отступ по скобкам или оператору присваивания. Операторы должны быть в начале строки.




#######################################################################################




II.3 Параметры Функций

Обязательная часть

	• Функция принимает максимум 4 именованных параметра.

	• Функция, которая не принимает аргументов, должна быть явно прототипирована со словом void в качестве аргумента.




#######################################################################################




II.3 Функции

Обязательная часть

	• Параметры прототипов функций должны быть названы

	• Каждое определение функции должно быть отделено пустой строкой от следующего.

	• Каждое определение функции должно быть отделено пустой строкой от следующего.

Рекомендуемая часть

	• Ваши идентификаторы работы должны быть выровнены в одном файле. Это относится к заголовкам C




#######################################################################################




II.7 Макросы и препроцессор

Обязательная часть

	• Запрещены определения, определяющие код.

	• Многострочные макросы запрещены.

	• Только имена макросов пишутся с большой буквы

	• Символы, следующие за символами #if, #ifdef или #ifndef, должны быть отступами




#######################################################################################




II.8 Запрещенные вещи!

Обязательная часть

	• Вам не разрешено использовать:
		◦ for
		◦ do...while
		◦ switch
		◦ case
		◦ goto

	• Тернарные операторы ‘?’ Вложенные

	• * Массивы с переменным размером (VLA-переменная Length Array)




#######################################################################################




II.9 Комментарии

Обязательная часть

	• Комментарии можно найти во всех исходных файлах.

	• В теле функций не должно быть комментариев.

	• Комментарии начинаются и заканчиваются одной строкой. Все промежуточные строки совпадают с ними и начинаются с «**».

	• Области комментариев, начинающиеся с //, запрещены.

Рекомендуемая часть

	• Ваши комментарии должны быть на английском языке и полезны.

	• Комментарии не могут оправдать плохую функцию.




#######################################################################################




II.10 Файлы

Обязательная часть

	• Вы не можете include файл .c


	• Вы не можете иметь более 5 определений функций в .c




#######################################################################################




II.11 Makefile

Обязательная часть

	• Правила $(NAME), clean, fclean, re и all являются обязательными.

	• Проект считается нефункциональным, если Makefile relink.

	• В случае мультибинарного проекта, в дополнение к предыдущим правилам, вы должны увидеть правило all, компилирующее два двоичных файла, а также правило, специфичное для каждого скомпилированного двоичного файла.

	• В случае проекта, использующего библиотеку функций (например, libft), ваш make-файл должен автоматически скомпилировать эту библиотеку.

	• Источники, необходимые для компиляции вашей программы, должны быть явно указаны в вашем Makefile.




#######################################################################################
